# athenz-authorizer
---
admin:
  access_log:
    - name: access_log_file
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
        path: "/dev/stdout"
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9901
node:
  id: envoy-0
  cluster: envoy-cluster
static_resources:
  listeners:
    - name: localhost_listener
      address:
        socket_address:
          protocol: TCP
          address: ::FFFF:127.0.0.1
          ipv4_compat: true
          port_value: 8080
      filter_chains: &localhost_filter_chains
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: localhost_proxy_prefix
                access_log: &access_log
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                route_config: &localhost_route_config
                  name: localhost_proxy_route
                  virtual_hosts:
                    - name: localhost_proxy_hosts
                      domains:
                        # Only a single wildcard domain is permitted in route https_proxy_route
                        - "*"
                      typed_per_filter_config:
                        envoy.filters.http.ext_authz:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                          check_settings:
                            context_extensions:
                              virtual_host: localhost_proxy_hosts
                      routes: &localhost_routes
                        - match:
                            path_separated_prefix: "/status"
                          direct_response:
                            status: 200
                            body:
                              inline_string: "This is server ingress proxy."
                          response_headers_to_add:
                            - header:
                                key: x-athenz-method
                                value: "%REQ(:METHOD)%"
                            - header:
                                key: x-athenz-path
                                value: "%REQ(:PATH)%"
                          typed_per_filter_config: &ext_authz_disabled
                            envoy.filters.http.ext_authz.authorization: &ext_authz_authorizationsidecar_disabled
                              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                              disabled: true
                        - match:
                            prefix: "/health"
                          route:
                            cluster: opa
                          typed_per_filter_config: *ext_authz_disabled
                        - match:
                            path_separated_prefix: "/zms/v1"
                          route:
                            cluster: zms
                          typed_per_filter_config: *ext_authz_disabled
                        - match:
                            path_separated_prefix: "/zts/v1"
                          route:
                            cluster: zts
                          typed_per_filter_config: *ext_authz_disabled
                        - match:
                            path_separated_prefix: "/authorizationsidecar"
                          route:
                            cluster: authorization-sidecar
                            prefix_rewrite: "/echoserver"
                            auto_host_rewrite: true
                          typed_per_filter_config: *ext_authz_disabled
                        - match:
                            path_separated_prefix: "/server"
                          route:
                            cluster: echoserver
                            prefix_rewrite: "/echoserver"
                            auto_host_rewrite: true
                          request_headers_to_add: &request_headers_to_add
                            - header:
                                key: x-athenz-sni
                                value: "%REQUESTED_SERVER_NAME%"
                            - header:
                                key: x-athenz-certificate-subject
                                value: "%DOWNSTREAM_PEER_SUBJECT%"
                            - header:
                                key: x-athenz-certificate-issuer
                                value: "%DOWNSTREAM_PEER_ISSUER%"
                            - header:
                                key: x-athenz-certificate-san-uri
                                value: "%DOWNSTREAM_PEER_URI_SAN%"
                            - header:
                                key: x-athenz-certificate-v-start
                                value: "%DOWNSTREAM_PEER_CERT_V_START%"
                            - header:
                                key: x-athenz-certificate-v-end
                                value: "%DOWNSTREAM_PEER_CERT_V_END%"
                            - header:
                                key: x-athenz-certificate
                                value: "%DOWNSTREAM_PEER_CERT%"
                        - match:
                            prefix: "/serverjwt"
                          typed_per_filter_config:
                            envoy.filters.http.ext_authz.authorization: *ext_authz_authorizationsidecar_disabled
                            envoy.filters.http.jwt_authn:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.PerRouteConfig
                              requirement_name: accesstoken
                          route:
                            cluster: echoserver
                            prefix_rewrite: "/echoserver"
                            auto_host_rewrite: true
                          request_headers_to_add: *request_headers_to_add
                        - match:
                            prefix: "/echoserver"
                          route:
                            cluster: echoserver
                          request_headers_to_add: *request_headers_to_add
                          typed_per_filter_config: *ext_authz_disabled
                        - match:
                            prefix: "/"
                          route:
                            cluster: envoy_admin
                          typed_per_filter_config: *ext_authz_disabled
                http_filters: &localhost_http_filters
                  # Extract principal name and set to x-athenz-principal from peer certificate
                  - name: envoy.filters.http.lua
                    typed_config:
                      # https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_request(request_handle)
                          if request_handle:connection():ssl() ~= nil then
                            request_handle:logInfo("ssl was not nil.")
                            -- extract x-athenz-principal from sans uri
                            for _, uri in pairs(request_handle:connection():ssl():uriSanPeerCertificate()) do
                              if string.sub(uri, 1, string.len("athenz://principal/")) == "athenz://principal/" then
                                request_handle:headers():add("x-athenz-principal", string.gsub(uri, "athenz://principal/(%w+)", "%1"))
                              end
                            end
                            -- extract x-athenz-domain and x-athenz-roles from subject cn
                            local subject = request_handle:connection():ssl():subjectPeerCertificate()
                            if string.match(subject, ".*CN=(%w+):role.(%w+),.*") ~= nil then
                              request_handle:headers():add("x-athenz-domain", string.gsub(subject, ".*CN=(%w+):role.(%w+),.*", "%1"))
                              request_handle:headers():add("x-athenz-roles", string.gsub(subject, ".*CN=(%w+):role.(%w+),.*", "%2"))
                            end
                            -- extract x-athenz-issuetime from valid from
                            request_handle:headers():add("x-athenz-issuetime", string.format('%d', request_handle:connection():ssl():validFromPeerCertificate()))
                            -- extract x-athenz-expirytime from valid after
                            request_handle:headers():add("x-athenz-expirytime", string.format('%d', request_handle:connection():ssl():expirationPeerCertificate()))
                          else
                            request_handle:logInfo("ssl was nil in envoy lua.")
                          end
                        end
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      # https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/jwt_authn_filter
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        athenz_zts_accesstoken:
                          remote_jwks:
                            http_uri:
                              cluster: zts
                              timeout: 5s
                              uri: "https://athenz-zts-server.athenz:4443/zts/v1/oauth2/keys?rfc=true"
                          #issuer: athenz-zts-server.athenz
                          # athenz domain
                          audiences:
                            - athenz
                          from_headers:
                            - name: "authorization"
                              value_prefix: "bearer "
                          forward: true
                          claim_to_headers:
                            - header_name: x-athenz-principal
                              claim_name: sub
                            - header_name: x-athenz-domain
                              claim_name: aud
                            - header_name: x-athenz-roles
                              claim_name: scope
                            - header_name: x-athenz-issuetime
                              claim_name: iat
                            - header_name: x-athenz-expirytime
                              claim_name: exp
                            - header_name: x-athenz-jwt-sub
                              claim_name: sub
                            - header_name: x-athenz-jwt-aud
                              claim_name: aud
                            - header_name: x-athenz-jwt-scope
                              claim_name: scope
                            - header_name: x-athenz-jwt-iss
                              claim_name: iss
                            - header_name: x-athenz-jwt-iat
                              claim_name: iat
                            - header_name: x-athenz-jwt-exp
                              claim_name: exp
                      requirement_map:
                        accesstoken:
                          provider_name: athenz_zts_accesstoken
                  - name: envoy.filters.http.ext_authz.authorization
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      # https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/grpc_service.proto#envoy-v3-api-msg-config-core-v3-grpcservice
                      #grpc_service:
                      #  google_grpc: # or envoy_grpc
                      #  target_uri: "127.0.0.1:9191"
                      # https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto.html#extensions-filters-http-ext-authz-v3-httpservice
                      http_service:
                        server_uri:
                          uri: authorization-sidecar
                          cluster: authorization-sidecar
                          timeout: 5s
                        authorization_request:
                          headers_to_add:
                            - key: x-athenz-proxy
                              value: "ingress"
                            - key: x-athenz-action
                              value: "%REQ(:METHOD)%"
                            - key: x-athenz-resource
                              value: "%REQ(:PATH)%"
                            - key: x-athenz-certificate
                              value: "%DOWNSTREAM_PEER_CERT%"
                        authorization_response:
                          allowed_upstream_headers:
                            patterns:
                              - exact: x-athenz-principal
                              - exact: x-athenz-domain
                              - exact: x-athenz-roles
                              - exact: x-athenz-issuetime
                              - exact: x-athenz-expirytime
                              - exact: x-athenz-authorizedroles
                      transport_api_version: V3
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    #- name: localhost_listener_v4
    #  address:
    #    socket_address:
    #      protocol: TCP
    #      address: 127.0.0.1
    #      port_value: 8080
    #  filter_chains: *localhost_filter_chains
    #- name: localhost_listener_v6
    #  address:
    #    socket_address:
    #      protocol: TCP
    #      address: ::1
    #      port_value: 8080
    #  filter_chains: *localhost_filter_chains
    - name: mtls_listener
      address:
        socket_address:
          protocol: TCP
          address: ::FFFF:0.0.0.0
          ipv4_compat: true
          port_value: 4443
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: mtls_proxy_prefix
                access_log: *access_log
                route_config: *localhost_route_config
                http_filters: *localhost_http_filters
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context: &common_tls_context
                tls_certificate_sds_secret_configs: &tls_certificate_sds_secret_configs_identity
                  - name: identity_sds
                    sds_config:
                      path_config_source:
                        path: /etc/envoy/identity_sds.yaml
                      resource_api_version: V3
                validation_context_sds_secret_config: &validation_context_sds_secret_config_ca
                  name: ca_sds
                  sds_config:
                    path_config_source:
                      path: /etc/envoy/ca_sds.yaml
                    resource_api_version: V3
              require_client_certificate: true
    - name: https_listener
      address:
        socket_address:
          protocol: TCP
          address: ::FFFF:0.0.0.0
          ipv4_compat: true
          port_value: 443
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: https_proxy_prefix
                access_log: *access_log
                route_config: *localhost_route_config
                http_filters: *localhost_http_filters
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificate_sds_secret_configs: *tls_certificate_sds_secret_configs_identity
  clusters:
    - name: envoy_admin
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: envoy_admin
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 9901
    - name: envoy_localhost
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: envoy_localhost
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8080
    - name: zms
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: zms
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: athenz-zms-server.athenz
                      port_value: 4443
      transport_socket: &transport_socket
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context: *common_tls_context
    - name: zts
      connect_timeout: 0.25s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: zts
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: athenz-zts-server.athenz
                      port_value: 4443
      transport_socket: *transport_socket
    - name: authorization-sidecar
      connect_timeout: 5s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: authorization-sidecar
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8280
    - name: opa
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: opa
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 8181
    - name: echoserver
      connect_timeout: 0.25s
      type: STATIC # LOGICAL_DNS or STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: echoserver
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 3000
